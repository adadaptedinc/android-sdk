import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.kotlin.gradle.dsl.ExplicitApiMode

plugins {
    id("org.barfuin.gradle.jacocolog") version "3.1.0"
    id 'maven-publish'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.10'
    id("org.jetbrains.kotlin.plugin.compose") version "2.1.10"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: 'jacoco.gradle'

group='com.adadapted'
android.buildFeatures.buildConfig true

android {
    compileSdk 35
    namespace 'com.adadapted'

    defaultConfig {
        minSdkVersion 23
        //noinspection EditedTargetSdkVersion
        targetSdkVersion 35
        versionName "4.1.8"
        buildConfigField("String","VERSION_NAME", "\"${defaultConfig.versionName}\"")
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'aasdk-proguard-rules.pro'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'aasdk-proguard-rules.pro'
        }
    }

    buildFeatures {
        compose = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation("io.ktor:ktor-client-core:2.2.4")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.2.4")
    implementation("io.ktor:ktor-client-content-negotiation:2.2.4")
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.1.10'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'io.ktor:ktor-client-android:2.2.4'
    implementation 'com.google.android.gms:play-services-ads-identifier:18.2.0'
    implementation 'androidx.compose.ui:ui:1.7.8'
    implementation 'androidx.compose.foundation:foundation:1.7.8'
    implementation 'androidx.compose.material:material:1.7.8'

    testImplementation 'androidx.test:core-ktx:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    //testImplementation 'io.ktor:ktor-client-mock2.2.4'
    testImplementation 'org.json:json:20200518'
    testImplementation 'org.robolectric:robolectric:4.14.1'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation project(path: ':advertising_sdk')
}

repositories {
    mavenCentral()
}

kotlin {
    setExplicitApi(ExplicitApiMode.Disabled)
    jvmToolchain(17)
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = 'com.adadapted'
                artifactId = 'android-sdk'
                version = '4.1.8'
            }
        }
    }
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}